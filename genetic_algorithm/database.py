"""
restore all the parameters needed for ag
"""
from genetic_algorithm.config_reader import Config as Cfg
import numpy as np
import pandas as pd
# ======bike_problem_instance=====
# station_count
station_count = int(Cfg.read_config(['bike_problem_config', 'station_count']))
# truck count
truck_count = int(Cfg.read_config(['bike_problem_config', 'truck_count']))
# bike_total_count
bike_total_count = int(Cfg.read_config(['bike_problem_config', 'bike_total_count']))
# truck capacity
truck_capacity = int(Cfg.read_config(['bike_problem_config', 'truck_capacity']))

# genetic parameter
iteration_time = int(Cfg.read_config(['genetic_parameter', 'iteration_time']))
mutation_prob = int(Cfg.read_config(['genetic_parameter', 'mutation_prob']))
crossover_prob = int(Cfg.read_config(['genetic_parameter', 'crossover_prob']))
population_size = int(Cfg.read_config(['genetic_parameter', 'population_size']))

# multi-objective parameter
phi = int(Cfg.read_config(['objective_parameter', 'phi']))

# ======static data=====
model_1_target = [60, 29, 19, 31, 38, 40, 59, 46, 33, 28, 28, 40, 19, 40, 49, 40, 34, 40, 72, 55]
hub = [60, 40, 40, 60, 80, 40, 60, 60, 40, 40, 60, 40, 80, 40, 60, 40, 40, 40, 80, 60]
# 存放用户需求数量，三维矩阵，时间*借车点*还车点
# 20个站点，前两小时的用户借车需求(2*20*20)
user_800 = [[[0, 3, 3, 2, 0, 2, 3, 1, 2, 1, 0, 3, 1, 3, 1, 2, 0, 0, 2, 3],
             [3, 0, 0, 0, 2, 3, 0, 1, 0, 2, 0, 0, 0, 3, 3, 3, 2, 2, 0, 1],
             [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1],
             [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1],
             [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
             [1, 3, 0, 3, 2, 0, 0, 2, 3, 3, 2, 2, 0, 0, 3, 1, 1, 3, 3, 2],
             [3, 1, 1, 1, 3, 1, 0, 0, 3, 0, 0, 3, 1, 0, 2, 0, 3, 1, 2, 0],
             [2, 3, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 2, 3, 3, 2, 0, 1, 1, 1],
             [3, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2],
             [2, 1, 3, 0, 1, 3, 0, 2, 1, 0, 0, 1, 2, 0, 3, 1, 0, 0, 0, 1],
             [3, 3, 1, 1, 0, 1, 2, 2, 2, 2, 0, 3, 2, 2, 0, 3, 0, 3, 2, 2],
             [3, 0, 0, 0, 0, 3, 0, 3, 2, 1, 3, 0, 3, 3, 2, 2, 1, 2, 3, 2],
             [2, 3, 0, 3, 3, 2, 3, 0, 3, 1, 3, 0, 0, 0, 2, 0, 0, 1, 2, 1],
             [2, 3, 1, 2, 0, 1, 2, 2, 1, 1, 0, 0, 3, 0, 3, 3, 2, 0, 2, 2],
             [1, 3, 3, 1, 3, 2, 0, 1, 3, 0, 3, 0, 0, 1, 0, 0, 3, 3, 3, 3],
             [3, 2, 0, 2, 0, 0, 2, 2, 3, 0, 1, 2, 0, 0, 2, 0, 1, 2, 1, 1],
             [0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 2, 1, 2, 3, 1, 2, 0, 2, 0, 1],
             [1, 1, 2, 2, 0, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 0, 0, 2],
             [1, 0, 2, 3, 2, 1, 2, 1, 0, 2, 2, 2, 0, 1, 0, 0, 3, 0, 0, 1],
             [3, 1, 0, 0, 2, 2, 1, 2, 3, 1, 2, 0, 0, 0, 3, 1, 2, 0, 2, 0]],
            [[3, 2, 0, 2, 3, 1, 2, 1, 0, 3, 1, 3, 1, 2, 0, 0, 2, 3, 3, 0],
             [0, 0, 2, 3, 0, 1, 0, 2, 0, 0, 0, 3, 3, 3, 2, 2, 0, 1, 0, 1],
             [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0],
             [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1],
             [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 3],
             [0, 3, 2, 0, 0, 2, 3, 3, 2, 2, 0, 0, 3, 1, 1, 3, 3, 2, 3, 1],
             [1, 1, 3, 1, 0, 0, 3, 0, 0, 3, 1, 0, 2, 0, 3, 1, 2, 0, 2, 3],
             [0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 2, 3, 3, 2, 0, 1, 1, 1, 3, 0],
             [2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 2, 1],
             [3, 0, 1, 3, 0, 2, 1, 0, 0, 1, 2, 0, 3, 1, 0, 0, 0, 1, 3, 3],
             [1, 1, 0, 1, 2, 2, 2, 2, 0, 3, 2, 2, 0, 3, 0, 3, 2, 2, 3, 0],
             [0, 0, 0, 3, 0, 3, 2, 1, 3, 0, 3, 3, 2, 2, 1, 2, 3, 2, 2, 3],
             [0, 3, 3, 2, 3, 0, 3, 1, 3, 0, 0, 0, 2, 0, 0, 1, 2, 1, 2, 3],
             [1, 2, 0, 1, 2, 2, 1, 1, 0, 0, 3, 0, 3, 3, 2, 0, 2, 2, 1, 3],
             [3, 1, 3, 2, 0, 1, 3, 0, 3, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 2],
             [0, 2, 0, 0, 2, 2, 3, 0, 1, 2, 0, 0, 2, 0, 1, 2, 1, 1, 0, 0],
             [0, 0, 1, 2, 2, 2, 0, 0, 2, 1, 2, 3, 1, 2, 0, 2, 0, 1, 1, 1],
             [2, 2, 0, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 0, 0, 2, 1, 0],
             [2, 3, 2, 1, 2, 1, 0, 2, 2, 2, 0, 1, 0, 0, 3, 0, 0, 1, 3, 1],
             [0, 0, 2, 2, 1, 2, 3, 1, 2, 0, 0, 0, 3, 1, 2, 0, 2, 0, 0, 1]]]

time_cost_table = [[2, 3, 1, 4, 2, 2, 3, 3, 4, 5, 5, 3, 2, 4, 1, 2, 3, 5, 3, 2, 0],
                   [0, 3, 2, 2, 3, 3, 2, 1, 2, 4, 3, 3, 3, 2, 4, 3, 2, 1, 3, 3, 2],
                   [3, 0, 1, 1, 3, 1, 1, 1, 3, 3, 3, 3, 4, 2, 2, 2, 3, 2, 3, 2, 3],
                   [3, 3, 0, 2, 2, 2, 3, 2, 2, 2, 1, 4, 1, 2, 2, 1, 3, 2, 4, 3, 1],
                   [4, 3, 2, 0, 3, 2, 3, 3, 2, 3, 4, 4, 4, 2, 2, 4, 2, 3, 2, 3, 4],
                   [2, 2, 4, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 2, 2, 3, 4, 2, 2, 1, 2],
                   [2, 2, 4, 1, 3, 0, 1, 1, 3, 2, 2, 2, 4, 4, 3, 2, 2, 2, 2, 4, 2],
                   [4, 1, 3, 2, 4, 3, 0, 3, 4, 4, 2, 3, 2, 2, 2, 1, 4, 1, 3, 3, 3],
                   [2, 1, 2, 1, 4, 1, 3, 0, 4, 1, 3, 1, 3, 3, 2, 3, 3, 3, 3, 3, 3],
                   [3, 3, 4, 4, 3, 2, 2, 3, 0, 4, 2, 1, 4, 3, 2, 3, 2, 3, 1, 3, 4],
                   [4, 2, 3, 1, 1, 3, 2, 3, 3, 0, 2, 1, 2, 4, 4, 4, 2, 1, 2, 3, 5],
                   [3, 3, 3, 4, 4, 1, 2, 4, 4, 3, 0, 4, 3, 1, 4, 3, 3, 4, 2, 3, 5],
                   [4, 3, 2, 2, 1, 2, 3, 4, 2, 3, 2, 0, 2, 3, 3, 3, 2, 2, 3, 2, 3],
                   [3, 3, 1, 4, 1, 3, 2, 4, 2, 3, 3, 3, 0, 3, 3, 2, 2, 2, 2, 3, 2],
                   [4, 4, 2, 3, 2, 4, 3, 2, 4, 1, 2, 2, 1, 0, 2, 3, 3, 2, 3, 2, 4],
                   [3, 3, 1, 1, 3, 2, 4, 2, 4, 1, 3, 4, 4, 3, 0, 3, 1, 4, 3, 4, 1],
                   [2, 2, 1, 3, 3, 1, 3, 3, 2, 3, 4, 2, 4, 2, 2, 0, 3, 1, 3, 3, 2],
                   [2, 1, 3, 1, 4, 4, 1, 1, 4, 3, 2, 4, 1, 1, 2, 2, 0, 2, 1, 2, 3],
                   [2, 4, 3, 4, 4, 3, 3, 2, 3, 3, 2, 2, 2, 2, 4, 1, 1, 0, 3, 1, 5],
                   [2, 4, 3, 3, 2, 4, 2, 2, 2, 2, 4, 4, 3, 2, 1, 2, 1, 2, 0, 2, 3],
                   [3, 4, 2, 4, 1, 2, 2, 1, 1, 1, 2, 2, 1, 3, 2, 1, 2, 3, 2, 0, 2]]

# initial_bike_count = [34, 24, 40, 55, 77, 37, 22, 20, 40, 30, 27, 40, 73, 40, 33, 40, 30, 30, 50, 58]


max_capacity = np.transpose(pd.read_csv('~/project/ffbs_rebalancing/resources/data_set/max_capacity.csv', header=0, usecols=[1, 2, 3]).
                             to_numpy()).reshape((3, 300))[0],
rent_6_9 = pd.read_csv('~/project/ffbs_rebalancing/resources/data_set/pred_rent_60min_06_09.csv').to_numpy()
return_6_9 = pd.read_csv('~/project/ffbs_rebalancing/resources/data_set/pred_return_60min_06_09.csv').to_numpy()

# initial_bike_count = pd.read_csv('~/project/ffbs_rebalancing/resources/data_set/init_24.csv', usecols=[1],
#                                      header=0).to_numpy().reshape((station_count,)) - \
# (rent_6_9[0] + rent_6_9[1] + rent_6_9[2] - return_6_9[0] - return_6_9[1] - return_6_9[2])

initial_bike_count = pd.read_csv('~/project/ffbs_rebalancing/resources/data_set/init_24.csv', usecols=[3],
                                     header=0).to_numpy().reshape((300,))[range(50)]
# initial_bike_count[initial_bike_count < 0] = 0
#
print(initial_bike_count)